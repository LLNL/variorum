sudo: true

language: c

compiler:
  - gcc

jobs:
  include:
   - stage: format
     script:
       - wget https://sourceforge.net/projects/astyle/files/astyle/astyle%203.1/astyle_3.1_linux.tar.gz
       - tar -xf astyle_3.1_linux.tar.gz
       - cd astyle/build/gcc && make
       - export PATH="${PWD}/bin:${PATH}"
       - cd -
       - echo -e "PWD:" ${PWD}
       - ./scripts/travis/astyle-format.sh
       - err=$?
       - if [ $err -ne 0 ]; then exit 0; else echo -e "Astyle formatting needed!"; exit 1; fi
  - stage: build
    env:
      global:
      - COMPILER_CC=gcc
      - COMPILER_CXX=g++
    include:
      - os: linux
        dist: trusty
#     - os: linux
#       dist: xenial
    matrix:
      # we want to test both static and shared, w/ and w/o docs.
      - BUILD_SHARED_LIBS=ON
        BUILD_DOCS=OFF
        VARIORUM_LOG=OFF
        VARIORUM_WITH_INTEL=ON
        VARIORUM_WITH_IBM=OFF
        VARIORUM_WITH_NVIDIA=OFF
        VARIORUM_WITH_AMD=OFF
#     - BUILD_SHARED_LIBS=ON
#       BUILD_DOCS=ON
#       VARIORUM_LOG=ON
#     - BUILD_SHARED_LIBS=OFF
#       BUILD_DOCS=OFF
#       VARIORUM_LOG=ON
#     - BUILD_SHARED_LIBS=ON
#       BUILD_DOCS=OFF
#       VARIORUM_LOG=OFF
    before_script:
      - date
      - sudo apt-get install python-sphinx
    after_script:
      - date
    install:
      # none
    script:
      - which g++
      - g++ --version
      - export CC=${COMPILER_CC}
      - export CXX=${COMPILER_CXX}
      - ${CC} --version
      - cd $TRAVIS_BUILD_DIR
      - echo -e "TRAVIS_BUILD_DIR:" ${TRAVIS_BUILD_DIR}
      - echo -e "PWD:" ${PWD}
      # install local spack
      - mkdir travis-spack-env
      - cd travis-spack-env
      - echo -e "PWD:" ${PWD}
      # get specific version of spack
      - wget https://github.com/spack/spack/archive/v0.14.0.tar.gz
      - tar -xzf v0.14.0.tar.gz
      - mv spack-0.14.0 spack
      - export PATH=${PWD}/spack/bin:${PATH}
      #- spack install py-sphinx
      - spack install hwloc
      # sphinx path
      #- export SPHINX_EXEUCUTABLE=`ls -d ${TRAVIS_BUILD_DIR}/travis-spack-env/spack/opt/spack/*/*/py-sphinx-*`
      # hwloc path
      - export HWLOC_DIR=`ls -d ${TRAVIS_BUILD_DIR}/travis-spack-env/spack/opt/spack/*/*/hwloc-*`
      #- echo -e "SPHINX_EXECUTABLE:" ${SPHINX_EXECUTABLE}
      - echo -e "HWLOC_DIR:" ${HWLOC_DIR}
      - which sphinx-build
      - cd ..
      # create out-of-source build dir
      - mkdir build-travis
      - cd build-travis
      - echo -e "PWD:" ${PWD}
      # cmake options
      # build type
      - CMAKE_OPTS="-DCMAKE_BUILD_TYPE=Debug"
      # shared or static libs
      - CMAKE_OPTS="${CMAKE_OPTS} -DBUILD_SHARED_LIBS=${BUILD_SHARED_LIBS}"
      # variorum logging
      - if [ $BUILD_DOCS = 'ON' ]; then CMAKE_OPTS="${CMAKE_OPTS} -DBUILD_DOCS=ON"; else CMAKE_OPTS="${CMAKE_OPTS} -DBUILD_DOCS=OFF"; fi
      - if [ $VARIORUM_LOG = 'ON' ]; then CMAKE_OPTS="${CMAKE_OPTS} -DVARIORUM_LOG=ON"; else CMAKE_OPTS="${CMAKE_OPTS} -DVARIORUM_LOG=OFF"; fi
      - if [ $VARIORUM_WITH_INTEL = 'ON' ]; then CMAKE_OPTS="${CMAKE_OPTS} -DVARIORUM_WITH_INTEL=ON"; else CMAKE_OPTS="${CMAKE_OPTS} -DVARIORUM_WITH_INTEL=OFF"; fi
      - if [ $VARIORUM_WITH_IBM = 'ON' ]; then CMAKE_OPTS="${CMAKE_OPTS} -DVARIORUM_WITH_IBM=ON"; else CMAKE_OPTS="${CMAKE_OPTS} -DVARIORUM_WITH_IBM=OFF"; fi
      - if [ $VARIORUM_WITH_AMD = 'ON' ]; then CMAKE_OPTS="${CMAKE_OPTS} -DVARIORUM_WITH_AMD=ON"; else CMAKE_OPTS="${CMAKE_OPTS} -DVARIORUM_WITH_AMD=OFF"; fi
      - if [ $VARIORUM_WITH_NVIDIA = 'ON' ]; then CMAKE_OPTS="${CMAKE_OPTS} -DVARIORUM_WITH_NVIDIA=ON"; else CMAKE_OPTS="${CMAKE_OPTS} -DVARIORUM_WITH_NVIDIA=OFF"; fi
      # install path
      - CMAKE_OPTS="${CMAKE_OPTS} -DCMAKE_INSTALL_PREFIX=../install-travis"
      - CMAKE_OPTS="${CMAKE_OPTS} -DHWLOC_DIR=${HWLOC_DIR}"
      # confirm CMake config options
      - echo -e "CMake Options:" ${CMAKE_OPTS}
      # make sure cmake is in our path
      - echo -e "PATH:" ${PATH}
      - which cmake
      - cmake --version
      - echo -e "PWD:" ${PWD}
      # configure
      - cmake ${CMAKE_OPTS} ../src
      # build, test, and install
      - make VERBOSE=1
#      - env CTEST_OUTPUT_ON_FAILURE=1 make test

notifications:
  email:
    recipients:
      - brink2@llnl.gov
    on_success: always
    on_failure: always
